
### Project Overview

This project is a comprehensive Java application designed to manage orders, users, products, and simulate traffic. It incorporates various object-oriented programming principles and design patterns.

### Technologies Used

- **Java**: The primary programming language used for developing the application.
- **IntelliJ IDEA**: Integrated Development Environment (IDE) for coding, debugging, and testing the application.

### Problem Solved

The project addresses the following problems:

1. **Order Management**: 
    - **Order.java** and **OrderDTO.java**: These classes handle the creation, validation, and management of orders.
    - **OrderValidationException.java**: Custom exception handling for order validation errors.

2. **User Management**:
    - **User.java** and **UserManager.java**: Manage user data and operations.
    
3. **Product Management**:
    - **ProductBook.java**, **ProductManager.java**, **ProductBookSide.java**, and **BookSide.java**: Manage products, including their categorization and operations.

4. **Price Handling**:
    - **Price.java** and **PriceFactory.java**: Manage price-related operations, including price creation and validation.
    - **InvalidPriceOperation.java**: Custom exception for handling invalid price operations.

5. **Traffic Simulation**:
    - **TrafficSim.java**: Simulates traffic scenarios to test system robustness and performance.

### Learnings

Through this project, I have gained extensive knowledge and experience in:

- **Object-Oriented Programming (OOP)**: Applied OOP principles such as encapsulation, inheritance, and polymorphism to build a scalable and maintainable codebase.
- **Design Patterns**: Implemented design patterns like Factory for price creation, which enhances code modularity and reusability.
- **Exception Handling**: Created custom exceptions to handle specific errors gracefully, improving the application's reliability.
- **Java Programming**: Deepened my understanding of Java, including its standard libraries and best practices.
- **Software Development Lifecycle**: Experienced the end-to-end software development process, from requirement analysis and design to implementation and testing.

This project showcases my ability to tackle complex problems using advanced programming techniques and methodologies, making me a strong candidate for software development roles.
