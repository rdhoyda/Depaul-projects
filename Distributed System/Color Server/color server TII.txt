Color Server Checklist

Refer to Checklist Instructions as needed.

Change "No" to "Yes" as you complete the tasks:

Task	Complete?
--------------- ADMINISTRATION -----------------
ROHAN DHOYDA	YES
I understand that making false claims on this checklist is an academic integrity violation.	YES
Used the version of Java required by this course?	YES
Included the full Header Information in each Java file?	YES
Saved THIS file in plain-text HTML format?	YES
All files correctly named, in a single directory?	YES
.class files have all been deleted before preparing the submission?	    YES
Files zipped together and submitted to D2L?	YES
Also concatenated all the .java source files into a single file named ColorAll.docx (or .html, or .txt) and submitted to the TII link?	YES
Ran the TII plagiarism checker to see the sample report?	YES
--------------- COLOR CLIENT AND SERVER -----------------
Removed Elliott's comments and replaced them with my own?	YES
I typed in the ColorServer.java code myself (strongly recommended).	YES
I typed in the ColorClient.java code myself (strongly recommended).	YES
Removed all package statements from the .java source code?	YES
Server code compiles from the command line [javac *.java] and runs?	YES
Client code compiles from the command line [javac *.java] and runs?	YES
I had some fun modifying and re-running the code. (Not required)	  YES
I posted some interesting comments, questions or reponses in the ColorServer discussion thread on D2L.	No
--------------- OPTIONAL FOR FUN -----------------
I modified state maintenance to include ALL THE COLORS passed back and forth, and displayed these on the client, after quit.	Yes

Comments:
Comment one if needed
Comment two if needed

etc.

/* 1.0 2023-01-12 Rohan Dhoyda, ColorServer.java and ColorClient.java

Name: Rohan Dhoyda
Data: 2023-01-22
Java Version: 18.0.2.1
Command-line compilation: > javac *.java [executed twice]
Running these programs:

Client and server can run on the same machine in different processes (in separate terminal windows), or on
different machines across the Internet depending on the argument passed to the ColorClient program.

To run on localhost:

Terminal/CMD window 1> java ColorServer
Terminal/CMD window 2> java ColorClient
Terminal/CMD window 3> java ColorClient
[...]
Terminal/CMD window N> java ColorClient

Alternatively, to run over the Internet:

Terminal/CMD window 1> java ColorServer
Terminal/CMD window 2> java ColorClient 172.16.0.98 [But use the actual IP address of the ColorServer]
[...]

Files needed: ColorServer.java, ColorClient.java

Notes:

Using TCP/IP, we send and receive colors from client to server and back again. You can run as many simultaneous
ColorClients as you wish and the ColorServer will keep all conversations separate (each request being handled
by a different ColorWorker).

--------------------

Thanks:

https://www.comrevo.com/2019/07/Sending-objects-over-sockets-Java-example-How-to-send-serialized-object-over-network-in-Java.html (Code dated 2019-07-09, by Ramesh)
https://rollbar.com/blog/java-socketexception/#
Also: Hughes, Shoffner and Winslow for Inet code.

--------------------

Of particular interest is that after each request for a new random color, the TCP/IP connection from client to
server is broken, which means we are running the system, as mentioned, under a CONNECTIONLESS, STATELESS
PROTOCOL. Nonetheless, we keep track of the state of the conversation ourselves, and can see this proven
because we always have access to the number of colors that have been traded during the entire
conversation. This is significant: if we can keep track of our conversation state with respect to how many
color transactions in this toy system, we can also keep track of the state of, say, a banking-transactions
conversation when using the web (even though the web uses the stateless HTTP protocol).

For those that are new to network programming, my strong recommendation is that you TYPE IN this entire pair
of programs yourself. It won't take very long. You'll make mistakes that you'll have to diagnose, and you'll
make changes you feel are closer to your style. But you will learn the *langauge* of multi-process,
multi-threaded network programming. And, you will always have a running model, which limits frustration.

If you use my code, be SURE to include the "thanks" links as well.

*/

import java.io.*;
import java.net.*;
import java.util.Scanner;

public class ColorClient {
  private static int clientColorCount = 0;
  public static void main(String argu[]) {
    ColorClient cc = new ColorClient(argu);
    cc.run(argu);
  }

  public ColorClient(String argu[]) { // 
    System.out.println("\nDo you want to use this constructor\n");
  }

  public void run(String argu[]) {
    
      String sNAME;
      if (argu.length < 1) sNAME = "localhost"; // The server name is the local host
      else sNAME = argu[0];

    String colorFromClient = "";
	Scanner consoleIn = new Scanner(System.in); // A new Scanner will be generated
	System.out.print("To Request a color you need to give your name: "); // This statement will ask a user to write down their name because if they dont give their name they wont be able to request for a server
	System.out.flush ();
	String UserName = consoleIn.nextLine();
	System.out.println("Hi " + UserName); // This will print Hi and the user name
	//We are making use of do while loop because this loop will perform this function over and over until someone types quit
	do {
	  System.out.print("Choose a color you want: ");// After writing user name this statement will ask the user to enter the color
	  colorFromClient = consoleIn.nextLine();
	  if (colorFromClient.indexOf("quit") < 0){ 
	    getColor(UserName, colorFromClient, sNAME);
	  }
	} while (colorFromClient.indexOf("quit") < 0); //When a user enters quit it will quit the process and we will get informed of how many colors we got
	System.out.println ("Cancelled by user request.");
	System.out.println (UserName + ", You sent and received " + clientColorCount + " Colors.");
  }

  void getColor(String UserName, String colorFromClient, String sName){
    
    try{
      ColorInformation colorObj = new ColorInformation(); // We are now setting up a color information object and this is defined in color server code which needs to be compiled first
      colorObj.UserName = UserName; // Will give the username to the color server
      colorObj.colorrequestreceived = colorFromClient; // The color request sent from client to the server
      colorObj.colorCount = clientColorCount; // Will count the total of color
      
      // Socket socket = new Socket("JUNKhost", 45565); // Demonstrate the UH exception below.
      Socket socket = new Socket(sName, 45565);  //The Server is listening to the socket for a client to make a connection on port 45565
      System.out.println("\nWe have successfully connected to the ColorServer at port 45,565"); //When the connection is sucessfully established it will print this statement
      
      OutputStream OutputStream = socket.getOutputStream(); //The output stream will get a port from the Operating system we never know
      ObjectOutputStream oos = new ObjectOutputStream(OutputStream); // To serialize the object.
      
      oos.writeObject(colorObj); // Marshal the serialized java object to the network.
      System.out.println("We have sent the serialized values to the ColorServer's server socket");

      InputStream InStream = socket.getInputStream(); //The input stream to the server will open up at port 45565
      ObjectInputStream ois = new ObjectInputStream(InStream);
      ColorInformation InObject = (ColorInformation) ois.readObject(); // We will now have random access to the color information

      
      clientColorCount = InObject.colorCount; // Save in local class variable.

      System.out.println("\nRESPONSE RECEIVED:"); // This means there is a response received from the color server
      System.out.println(InObject.messageToClient);
      System.out.println("The color sent back is: " + InObject.colorgiven); //The color which is given back to the color client
      System.out.println("The color count is: " + InObject.colorCount + "\n"); // The color count is how many color a client requested from a server
      
      
      System.out.println("Closing the connection to the server.\n"); // After the client receives the color the connection between client and server is terminated
      socket.close(); // If we want to close the socket we write this following code
    } catch (ConnectException CE){
      System.out.println("\nOh no. The ColorServer refused our connection! Is it running?\n");
      CE.printStackTrace();
    } catch (UnknownHostException UH){
      System.out.println("\nUnknown Host problem.\n"); 
      UH.printStackTrace();
    } catch(ClassNotFoundException CNF){
	CNF.printStackTrace();
    } catch (IOException IOE){
      IOE.printStackTrace(); 
    }
  }
}

